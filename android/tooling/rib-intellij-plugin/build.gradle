buildscript {
    dependencies {
        classpath deps.build.intellijPlugin
    }
}

apply plugin: "org.jetbrains.intellij"
apply plugin: "org.jetbrains.kotlin.jvm"

kotlin {
    jvmToolchain(11)
}

group "com.uber.rib"

repositories {
    mavenLocal()
}

dependencies {

    testImplementation(project(":libraries:rib-base")) {
        transitive = false
    }
    compileOnly(project(path: ":libraries:rib-android", configuration: 'default')) {
        transitive = false
    }

    testImplementation(project(":libraries:rib-test")) {
        transitive = false
    }
    testImplementation(project(":libraries:rib-compiler-app")) {
        transitive = false
    }
    testImplementation(project(":libraries:rib-compiler-test")) {
        transitive = false
    }
    testImplementation deps.apt.daggerCompiler
    testImplementation deps.apt.javaxInject
    testImplementation deps.external.dagger
    testImplementation deps.uber.autodispose
    testImplementation deps.uber.autodisposeLifecycle
    testImplementation deps.test.truth
    testImplementation deps.test.compileTesting
    testImplementation deps.test.mockito
    testImplementation deps.androidx.annotations
    testImplementation deps.apt.androidApi
}

// Determines if the machine has Maven credentials.
def hasMavenCredentials() {
    return ext.mavenUser && ext.mavenPassword
}

// Determines if it is a release build.
def isReleaseBuild() {
    return System.env.ENABLE_RELEASE_BUILD.equals("true")
}

ext.pluginXml = new XmlSlurper().parse(file("src/main/resources/META-INF/plugin.xml"))
version = pluginXml.version

intellij {
    plugins = ['java', 'Kotlin', 'android']
    version = deps.versions.intellij
    pluginName = "uber-ribs"
    updateSinceUntilBuild = false
    sandboxDir = "${project.gradle.gradleHomeDir}/caches/intellij"
    downloadSources = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

afterEvaluate {
    artifacts {
        archives sourcesJar
        archives project.tasks.getByName("buildPlugin")
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    tasks.withType(JavaCompile).all {
        sourceCompatibility = "11"
        targetCompatibility = "11"
    }
}
